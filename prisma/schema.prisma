generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               String            @id @default(uuid())
  name             String
  email            String            @unique
  password         String
  role             String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  appointments     Appointment[]     @relation("UserAppointments")
  patients         Patient[]         @relation("UserPatients")
  services         Service[]         @relation("UserServices")
  financialRecords FinancialRecord[] @relation("UserFinancialRecords")
}

model Patient {
  id           String        @id @default(uuid())
  name         String
  email        String?       @unique
  phone        String
  birthDate    DateTime
  address      String?
  createdAt    DateTime      @default(now())
  userId       String
  user         User          @relation("UserPatients", fields: [userId], references: [id])
  appointments Appointment[]
}

model Service {
  id           String        @id @default(uuid())
  name         String
  description  String?
  price        Float
  duration     Int
  type         String
  userId       String
  user         User          @relation("UserServices", fields: [userId], references: [id])
  appointments Appointment[]
}

model Appointment {
  id             String   @id @default(uuid())
  patientId      String
  serviceId      String
  professionalId String
  date           DateTime
  status         String
  createdAt      DateTime @default(now())

  patient          Patient           @relation(fields: [patientId], references: [id])
  service          Service           @relation(fields: [serviceId], references: [id])
  professional     User              @relation("UserAppointments", fields: [professionalId], references: [id])
  financialRecords FinancialRecord[]
}

model Insurance {
  id   String @id @default(uuid())
  name String @unique
}

model FinancialRecord {
  id            String       @id @default(uuid())
  type          String
  description   String?
  amount        Float
  date          DateTime     @default(now())
  appointmentId String?
  appointment   Appointment? @relation(fields: [appointmentId], references: [id])
  userId        String
  user          User         @relation("UserFinancialRecords", fields: [userId], references: [id])

  @@index([appointmentId])
}
